0403 

1. 코드 정리
    부정보다는 긍정으로 먼저 코드 작성하기

2. 로그인 세션
    인증 -> authentication(인가)

    로그인 -> 찜 목록, 내 정보, 구매한 상품
    비로그인 -> 상품 구경

    인가
    :사이트내에 관리자/고객 접근하는 페이지가 다르다.
    -> 관리자든 고객이든 인증이 필요 각 역할이 있기 때문에
    인증 후 페이지에 들려보내주기 -> 인가

3. 세션 : 로그인이 되어 있는 상태
    쿠키 vs 세션 vs JWT
    로그인을 유지 시켜주는 친구들
    
    쿠키란(포츈쿠키)
        웹에서 서버와 클라이언트과 주고받는 데이터
        로그인 -> 서버가 쿠키를 구워줌 -> 사용자 가지고있다는걸 서버에게 보여줌 -> 서버 확인함 -> 반복 -> 로그아웃이나 만료까지
        장점:서버가 저장x -> 서버 저장공간 http => stateless -> RESTful 스럽다
        단점:보안에 너무 취약함

    세션(Session)
        로그인 -> 서버가 금고를 만들어, 정보 저장 그 번호를 줌 -> 사용자랑 번호랑 가지고 대화
        장점:보안 비교적 좋음
        단점:서버가 저장o => 서버 저장 공간, stateless x, Http 특징 조콤 부족
    
    JWT(json web token)  // https://jwt.io/introduction
        쿠카와 세션의 장점을 가지고옴
        개념: JSON 형태의 데이터를 안저하게 전송하기위한 토큰 = 토큰을 가지고있는 사용자가 증명을 할수있는 수단
            인증,입장,관리자 권한
        장점
            보안이 강하다(암호화)
            상태를 저장하지 않습니다(로그를 저장하지 않음) -> stateless o, Http 특징 잘 살림
            서버에 부담을 줄여준다 -> 토큰을 발행하는 서버를 따로 관리 가능
        구조
            HEADER
                알고리즘(암호화 하기위한 알고리즘 정보)
                토큰의 형태(JWT)
            PAYLOAD
                json 형태, 대부분 데이터가 담겨있다.(비밀번호 빼고)
                사용자 정보
            VERIFY SIGNATURE
                서명
                페이로드값이 바뀌면 이값도 변한다. 그렇기 떄문에 JWT가 안전하다
                이전에 서명해서 줬던 데이터도 비교함

4. JWT로 인증/인가 절차
    클라이언트에서 정보를 서버로 전달(로그인) -> 서버 내부로직 -> 서버가 클라이언트 에게 JWT 전달(서명해준 토큰)
    -> 클라이언트에서 다른 작업을 위해 서버에게 요청을 보냄(JWT 보여줌) -> 서버에서는 내가 서명해준 토큰 맞네 그작업 실행해도 괜찮아
     jwt-demo.js 확인하여 인증/인가법, 토큰생성, 디코딩등 확인하기

5. .env(environment)
    개발 환경설정